{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"draw",
				"drawPlayer"
			],
			[
				"dirt",
				"dirtTexture"
			],
			[
				"tile",
				"tile_size"
			],
			[
				"started",
				"IsStarted"
			],
			[
				"Get",
				"GetTicks"
			],
			[
				"start",
				"startTicks"
			],
			[
				"paused",
				"pausedTicks"
			],
			[
				"screen",
				"screen_flags"
			]
		]
	},
	"buffers":
	[
		{
			"file": "amberfell.go",
			"settings":
			{
				"buffer_size": 3432,
				"line_ending": "Unix"
			}
		},
		{
			"file": "constants.go",
			"settings":
			{
				"buffer_size": 1545,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 24 files for \"SCREEN_SCALE\" (case sensitive, whole word)\n\n/home/iand/wip/amberfell/constants.go:\n   17  \n   18  	TILE_WIDTH   = 48             // Height and width of a block texture in pixels\n   19: 	SCREEN_SCALE = 2.0 * TILE_WIDTH // Width of one world coordinate unit in pixels\n   20: 	PIXEL_SCALE = 2.0 / SCREEN_SCALE  // Width of one pixel in world coordinates\n   21  \n   22  	KEY_DEBOUNCE_DELAY = 3e8 // nanoseconds\n\n/home/iand/wip/amberfell/viewport.go:\n   39  	gl.LoadIdentity()\n   40  \n   41: 	viewWidth := float64(self.screenWidth) / float64(SCREEN_SCALE)\n   42: 	viewHeight := float64(self.screenHeight) / float64(SCREEN_SCALE)\n   43  \n   44  	self.lplane = -viewWidth\n\n4 matches across 2 files\n\n\nSearching 24 files for \"color\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n   13  	\"github.com/banthar/gl\"\n   14  	\"github.com/kierdavis/go/amberfell/mm3dmodel\"\n   15: 	\"image/color\"\n   16  	\"math/rand\"\n   17  	\"os\"\n   ..\n  147  	InitTerrainBlocks()\n  148  \n  149: 	consoleFont = NewFont(\"res/Jura-DemiBold.ttf\", 16, color.RGBA{255, 255, 255, 0})\n  150: 	// consoleFont = NewFont(\"res/FreeMono.ttf\", 16, color.RGBA{255, 255, 255, 0})\n  151  \n  152  	viewport.Reshape(int(screen.W), int(screen.H))\n\n/home/iand/wip/amberfell/fonts.go:\n   10  	\"github.com/banthar/Go-SDL/ttf\"\n   11  	\"image\"\n   12: 	\"image/color\"\n   13  )\n   14  type Font struct {\n   ..\n   19  }\n   20  \n   21: func NewFont(filename string, size int, c color.Color) *Font {\n   22  \n   23  	var font Font\n\n5 matches across 2 files\n\n\nSearching 24 files for \"Color\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n  127  	gl.Enable(gl.LIGHT1)\n  128  \n  129: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\n  130: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\n  131  	// gl.Enable ( gl.COLOR_MATERIAL )\n  132  \n\n/home/iand/wip/amberfell/fonts.go:\n   19  }\n   20  \n   21: func NewFont(filename string, size int, c color.Color) *Font {\n   22  \n   23  	var font Font\n   ..\n   47  		// rect := sdl.Rect{int16(minx), int16(ascent)-int16(maxy), 0, 0}\n   48  \n   49: 		fontSurface := ttf.RenderText_Blended(extfont, string(ch), sdl.ColorFromGoColor(c))\n   50  		fontSurface.Blit(nil, surface, nil)\n   51  \n   ..\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\n   75: 		gl.Color4ub(255, 255, 255, 255)\n   76  		gl.Begin(gl.QUADS)\n   77  		gl.TexCoord2d(0, 0)\n\n/home/iand/wip/amberfell/shapes.go:\n  175  \n  176  		if selectedFace == EAST_FACE {\n  177: 			gl.Color4ub(96, 208, 96, 255)\n  178  		} else {\n  179: 			gl.Color4ub(255, 255, 255, 255)\n  180  		}\n  181  \n  ...\n  206  	if wtexture != nil {\n  207  		if selectedFace == WEST_FACE {\n  208: 			gl.Color4ub(96, 208, 96, 255)\n  209  		} else {\n  210: 			gl.Color4ub(255, 255, 255, 255)\n  211  		}\n  212  \n  ...\n  231  	if ntexture != nil {\n  232  		if selectedFace == NORTH_FACE {\n  233: 			gl.Color4ub(96, 208, 96, 255)\n  234  		} else {\n  235: 			gl.Color4ub(255, 255, 255, 255)\n  236  		}\n  237  \n  ...\n  254  	if stexture != nil {\n  255  		if selectedFace == SOUTH_FACE {\n  256: 			gl.Color4ub(96, 208, 96, 255)\n  257  		} else {\n  258: 			gl.Color4ub(255, 255, 255, 255)\n  259  		}\n  260  \n  ...\n  279  	if utexture != nil {\n  280  		if selectedFace == UP_FACE {\n  281: 			gl.Color4ub(96, 208, 96, 255)\n  282  		} else {\n  283: 			gl.Color4ub(255, 255, 255, 255)\n  284  		}\n  285  \n  ...\n  382  	if dtexture != nil {\n  383  		if selectedFace == DOWN_FACE {\n  384: 			gl.Color4ub(96, 208, 96, 255)\n  385  		} else {\n  386: 			gl.Color4ub(255, 255, 255, 255)\n  387  		}\n  388  \n  ...\n  410  	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\n  411  	// might need to use glPolygonOffset\n  412: 	gl.Color4ub(255, 32, 32, 0)\n  413  	if face == UP_FACE {\n  414  		gl.Enable(gl.POLYGON_OFFSET_LINE)\n  ...\n  425  		gl.Disable(gl.POLYGON_OFFSET_LINE)\n  426  	}\n  427: 	gl.Color4ub(255, 128, 128, 128)\n  428  }\n  429  \n\n/home/iand/wip/amberfell/window.go:\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\n   18  \n   19: 	gl.Color4ub(255, 255, 255, 255)\n   20  	gl.Enable(gl.TEXTURE_2D)\n   21  	gl.Enable(gl.DEPTH_TEST)\n   ..\n   99  \n  100  	gl.LoadIdentity()\n  101: 	gl.Color4ub(255, 255, 255, 255)\n  102  \n  103  \n  ...\n  120  \n  121  		gl.LoadIdentity()\n  122: 		gl.Color4ub(0, 0, 0, 208)\n  123  \n  124  		gl.Begin(gl.QUADS)\n\n23 matches across 4 files\n\n\nSearching 24 files for \"gl.Color\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n  122  	gl.Enable(gl.LIGHT1)\n  123  \n  124: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\n  125: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\n  126  	gl.Enable ( gl.COLOR_MATERIAL )\n  127  \n\n/home/iand/wip/amberfell/fonts.go:\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\n   75: 		gl.Color4ub(255, 255, 255, 255)\n   76  		gl.Begin(gl.QUADS)\n   77  		gl.TexCoord2d(0, 0)\n\n/home/iand/wip/amberfell/shapes.go:\n  175  \n  176  		if selectedFace == EAST_FACE {\n  177: 			gl.Color4ub(96, 208, 96, 255)\n  178  		} else {\n  179: 			gl.Color4ub(255, 255, 255, 255)\n  180  		}\n  181  \n  ...\n  206  	if wtexture != nil {\n  207  		if selectedFace == WEST_FACE {\n  208: 			gl.Color4ub(96, 208, 96, 255)\n  209  		} else {\n  210: 			gl.Color4ub(255, 255, 255, 255)\n  211  		}\n  212  \n  ...\n  231  	if ntexture != nil {\n  232  		if selectedFace == NORTH_FACE {\n  233: 			gl.Color4ub(96, 208, 96, 255)\n  234  		} else {\n  235: 			gl.Color4ub(255, 255, 255, 255)\n  236  		}\n  237  \n  ...\n  254  	if stexture != nil {\n  255  		if selectedFace == SOUTH_FACE {\n  256: 			gl.Color4ub(96, 208, 96, 255)\n  257  		} else {\n  258: 			gl.Color4ub(255, 255, 255, 255)\n  259  		}\n  260  \n  ...\n  279  	if utexture != nil {\n  280  		if selectedFace == UP_FACE {\n  281: 			gl.Color4ub(96, 208, 96, 255)\n  282  		} else {\n  283: 			gl.Color4ub(255, 255, 255, 255)\n  284  		}\n  285  \n  ...\n  382  	if dtexture != nil {\n  383  		if selectedFace == DOWN_FACE {\n  384: 			gl.Color4ub(96, 208, 96, 255)\n  385  		} else {\n  386: 			gl.Color4ub(255, 255, 255, 255)\n  387  		}\n  388  \n  ...\n  410  	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\n  411  	// might need to use glPolygonOffset\n  412: 	gl.Color4ub(255, 32, 32, 0)\n  413  	if face == UP_FACE {\n  414  		gl.Enable(gl.POLYGON_OFFSET_LINE)\n  ...\n  425  		gl.Disable(gl.POLYGON_OFFSET_LINE)\n  426  	}\n  427: 	gl.Color4ub(255, 128, 128, 128)\n  428  }\n  429  \n\n/home/iand/wip/amberfell/window.go:\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\n   18  \n   19: 	gl.Color4ub(255, 255, 255, 255)\n   20  	gl.Enable(gl.TEXTURE_2D)\n   21  	gl.Enable(gl.DEPTH_TEST)\n   ..\n   99  \n  100  	gl.LoadIdentity()\n  101: 	gl.Color4ub(128, 128, 128, 255)\n  102  \n  103  \n  ...\n  120  \n  121  		gl.LoadIdentity()\n  122: 		gl.Color4ub(0, 0, 0, 208)\n  123  \n  124  		gl.Begin(gl.QUADS)\n\n20 matches across 4 files\n\n\nSearching 24 files for \"gl.Color\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n  122  	gl.Enable(gl.LIGHT1)\n  123  \n  124: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\n  125: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\n  126  	gl.Enable ( gl.COLOR_MATERIAL )\n  127  \n\n/home/iand/wip/amberfell/fonts.go:\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\n   75: 		gl.Color4ub(255, 255, 255, 255)\n   76  		gl.Begin(gl.QUADS)\n   77  		gl.TexCoord2d(0, 0)\n\n/home/iand/wip/amberfell/shapes.go:\n  175  \n  176  		if selectedFace == EAST_FACE {\n  177: 			gl.Color4ub(96, 208, 96, 255)\n  178  		} else {\n  179: 			gl.Color4ub(255, 255, 255, 255)\n  180  		}\n  181  \n  ...\n  206  	if wtexture != nil {\n  207  		if selectedFace == WEST_FACE {\n  208: 			gl.Color4ub(96, 208, 96, 255)\n  209  		} else {\n  210: 			gl.Color4ub(255, 255, 255, 255)\n  211  		}\n  212  \n  ...\n  231  	if ntexture != nil {\n  232  		if selectedFace == NORTH_FACE {\n  233: 			gl.Color4ub(96, 208, 96, 255)\n  234  		} else {\n  235: 			gl.Color4ub(255, 255, 255, 255)\n  236  		}\n  237  \n  ...\n  254  	if stexture != nil {\n  255  		if selectedFace == SOUTH_FACE {\n  256: 			gl.Color4ub(96, 208, 96, 255)\n  257  		} else {\n  258: 			gl.Color4ub(255, 255, 255, 255)\n  259  		}\n  260  \n  ...\n  279  	if utexture != nil {\n  280  		if selectedFace == UP_FACE {\n  281: 			gl.Color4ub(96, 208, 96, 255)\n  282  		} else {\n  283: 			gl.Color4ub(255, 255, 255, 255)\n  284  		}\n  285  \n  ...\n  382  	if dtexture != nil {\n  383  		if selectedFace == DOWN_FACE {\n  384: 			gl.Color4ub(96, 208, 96, 255)\n  385  		} else {\n  386: 			gl.Color4ub(255, 255, 255, 255)\n  387  		}\n  388  \n  ...\n  410  // 	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\n  411  // 	// might need to use glPolygonOffset\n  412: // 	gl.Color4ub(255, 32, 32, 0)\n  413  // 	if face == UP_FACE {\n  414  // 		gl.Enable(gl.POLYGON_OFFSET_LINE)\n  ...\n  425  // 		gl.Disable(gl.POLYGON_OFFSET_LINE)\n  426  // 	}\n  427: // 	gl.Color4ub(255, 128, 128, 128)\n  428  // }\n  429  \n\n/home/iand/wip/amberfell/window.go:\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\n   18  \n   19: 	gl.Color4ub(255, 255, 255, 255)\n   20  	gl.Enable(gl.TEXTURE_2D)\n   21  	gl.Enable(gl.DEPTH_TEST)\n   ..\n   99  \n  100  	gl.LoadIdentity()\n  101: 	gl.Color4ub(128, 128, 128, 255)\n  102  \n  103  \n  ...\n  120  \n  121  		gl.LoadIdentity()\n  122: 		gl.Color4ub(0, 0, 0, 208)\n  123  \n  124  		gl.Begin(gl.QUADS)\n\n20 matches across 4 files\n\n\nSearching 27 files for \"MapTextures\" (case sensitive, whole word)\n\n/home/iand/wip/amberfell/amberfell.sublime-workspace:\n  347  			\"'a'\",\n  348  			\"SCREEN_SCALE\",\n  349: 			\"MapTextures\",\n  350  			\"]\",\n  351  			\"CreateRGB\",\n  ...\n  494  			\"af.World\",\n  495  			\"af.world\",\n  496: 			\"MapTextures\",\n  497  			\"width\",\n  498  			\"scale\",\n\n/home/iand/wip/amberfell/player.go:\n   61  \n   62  	gl.Translatef(0.0, float32(player.H()/2)-0.5, 0.0)\n   63: 	Cuboid(player.W(), player.H(), player.D(), &MapTextures[33], &MapTextures[32], &MapTextures[32], &MapTextures[32], &MapTextures[32], &MapTextures[32], FACE_NONE)\n   64  \n   65  	gl.PopMatrix()\n\n/home/iand/wip/amberfell/shapes.go:\n   53  \n   54  			textureIndex := i*16 + j\n   55: 			MapTextures[textureIndex] = gl.GenTexture()\n   56: 			MapTextures[textureIndex].Bind(gl.TEXTURE_2D)\n   57  			gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n   58  			gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n   ..\n   60  			// gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n   61  			gl.TexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels, pixels, 0, gl.RGBA, gl.UNSIGNED_BYTE, &rgba.Pix[0])\n   62: 			MapTextures[textureIndex].Unbind(gl.TEXTURE_2D)\n   63  \n   64  		}\n   ..\n   68  func InitTerrainBlocks() {\n   69  	TerrainBlocks = make(map[uint16]TerrainBlock)\n   70: 	TerrainBlocks[BLOCK_STONE] = TerrainBlock{BLOCK_STONE, \"Stone\", &MapTextures[TEXTURE_STONE_TOP], &MapTextures[TEXTURE_STONE], &MapTextures[TEXTURE_STONE], &MapTextures[TEXTURE_STONE], &MapTextures[TEXTURE_STONE], &MapTextures[TEXTURE_STONE]}\n   71: 	TerrainBlocks[BLOCK_DIRT] = TerrainBlock{BLOCK_DIRT, \"Dirt\", &MapTextures[TEXTURE_DIRT_TOP], &MapTextures[TEXTURE_DIRT], &MapTextures[TEXTURE_DIRT], &MapTextures[TEXTURE_DIRT], &MapTextures[TEXTURE_DIRT], &MapTextures[TEXTURE_DIRT]}\n   72  }\n   73  \n\n23 matches across 3 files\n\n\nSearching 30 files for \"gl.LIGHT1\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n  122  	gl.Enable(gl.LIGHTING)\n  123  	gl.Enable(gl.LIGHT0)\n  124: 	gl.Enable(gl.LIGHT1)\n  125  \n  126  	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\n\n/home/iand/wip/amberfell/amberfell.sublime-workspace:\n   57  		},\n   58  		{\n   59: 			\"contents\": \"Searching 24 files for \\\"SCREEN_SCALE\\\" (case sensitive, whole word)\\n\\n/home/iand/wip/amberfell/constants.go:\\n   17  \\n   18  	TILE_WIDTH   = 48             // Height and width of a block texture in pixels\\n   19: 	SCREEN_SCALE = 2.0 * TILE_WIDTH // Width of one world coordinate unit in pixels\\n   20: 	PIXEL_SCALE = 2.0 / SCREEN_SCALE  // Width of one pixel in world coordinates\\n   21  \\n   22  	KEY_DEBOUNCE_DELAY = 3e8 // nanoseconds\\n\\n/home/iand/wip/amberfell/viewport.go:\\n   39  	gl.LoadIdentity()\\n   40  \\n   41: 	viewWidth := float64(self.screenWidth) / float64(SCREEN_SCALE)\\n   42: 	viewHeight := float64(self.screenHeight) / float64(SCREEN_SCALE)\\n   43  \\n   44  	self.lplane = -viewWidth\\n\\n4 matches across 2 files\\n\\n\\nSearching 24 files for \\\"color\\\" (case sensitive)\\n\\n/home/iand/wip/amberfell/amberfell.go:\\n   13  	\\\"github.com/banthar/gl\\\"\\n   14  	\\\"github.com/kierdavis/go/amberfell/mm3dmodel\\\"\\n   15: 	\\\"image/color\\\"\\n   16  	\\\"math/rand\\\"\\n   17  	\\\"os\\\"\\n   ..\\n  147  	InitTerrainBlocks()\\n  148  \\n  149: 	consoleFont = NewFont(\\\"res/Jura-DemiBold.ttf\\\", 16, color.RGBA{255, 255, 255, 0})\\n  150: 	// consoleFont = NewFont(\\\"res/FreeMono.ttf\\\", 16, color.RGBA{255, 255, 255, 0})\\n  151  \\n  152  	viewport.Reshape(int(screen.W), int(screen.H))\\n\\n/home/iand/wip/amberfell/fonts.go:\\n   10  	\\\"github.com/banthar/Go-SDL/ttf\\\"\\n   11  	\\\"image\\\"\\n   12: 	\\\"image/color\\\"\\n   13  )\\n   14  type Font struct {\\n   ..\\n   19  }\\n   20  \\n   21: func NewFont(filename string, size int, c color.Color) *Font {\\n   22  \\n   23  	var font Font\\n\\n5 matches across 2 files\\n\\n\\nSearching 24 files for \\\"Color\\\" (case sensitive)\\n\\n/home/iand/wip/amberfell/amberfell.go:\\n  127  	gl.Enable(gl.LIGHT1)\\n  128  \\n  129: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\\n  130: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\\n  131  	// gl.Enable ( gl.COLOR_MATERIAL )\\n  132  \\n\\n/home/iand/wip/amberfell/fonts.go:\\n   19  }\\n   20  \\n   21: func NewFont(filename string, size int, c color.Color) *Font {\\n   22  \\n   23  	var font Font\\n   ..\\n   47  		// rect := sdl.Rect{int16(minx), int16(ascent)-int16(maxy), 0, 0}\\n   48  \\n   49: 		fontSurface := ttf.RenderText_Blended(extfont, string(ch), sdl.ColorFromGoColor(c))\\n   50  		fontSurface.Blit(nil, surface, nil)\\n   51  \\n   ..\\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\\n   75: 		gl.Color4ub(255, 255, 255, 255)\\n   76  		gl.Begin(gl.QUADS)\\n   77  		gl.TexCoord2d(0, 0)\\n\\n/home/iand/wip/amberfell/shapes.go:\\n  175  \\n  176  		if selectedFace == EAST_FACE {\\n  177: 			gl.Color4ub(96, 208, 96, 255)\\n  178  		} else {\\n  179: 			gl.Color4ub(255, 255, 255, 255)\\n  180  		}\\n  181  \\n  ...\\n  206  	if wtexture != nil {\\n  207  		if selectedFace == WEST_FACE {\\n  208: 			gl.Color4ub(96, 208, 96, 255)\\n  209  		} else {\\n  210: 			gl.Color4ub(255, 255, 255, 255)\\n  211  		}\\n  212  \\n  ...\\n  231  	if ntexture != nil {\\n  232  		if selectedFace == NORTH_FACE {\\n  233: 			gl.Color4ub(96, 208, 96, 255)\\n  234  		} else {\\n  235: 			gl.Color4ub(255, 255, 255, 255)\\n  236  		}\\n  237  \\n  ...\\n  254  	if stexture != nil {\\n  255  		if selectedFace == SOUTH_FACE {\\n  256: 			gl.Color4ub(96, 208, 96, 255)\\n  257  		} else {\\n  258: 			gl.Color4ub(255, 255, 255, 255)\\n  259  		}\\n  260  \\n  ...\\n  279  	if utexture != nil {\\n  280  		if selectedFace == UP_FACE {\\n  281: 			gl.Color4ub(96, 208, 96, 255)\\n  282  		} else {\\n  283: 			gl.Color4ub(255, 255, 255, 255)\\n  284  		}\\n  285  \\n  ...\\n  382  	if dtexture != nil {\\n  383  		if selectedFace == DOWN_FACE {\\n  384: 			gl.Color4ub(96, 208, 96, 255)\\n  385  		} else {\\n  386: 			gl.Color4ub(255, 255, 255, 255)\\n  387  		}\\n  388  \\n  ...\\n  410  	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\\n  411  	// might need to use glPolygonOffset\\n  412: 	gl.Color4ub(255, 32, 32, 0)\\n  413  	if face == UP_FACE {\\n  414  		gl.Enable(gl.POLYGON_OFFSET_LINE)\\n  ...\\n  425  		gl.Disable(gl.POLYGON_OFFSET_LINE)\\n  426  	}\\n  427: 	gl.Color4ub(255, 128, 128, 128)\\n  428  }\\n  429  \\n\\n/home/iand/wip/amberfell/window.go:\\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\\n   18  \\n   19: 	gl.Color4ub(255, 255, 255, 255)\\n   20  	gl.Enable(gl.TEXTURE_2D)\\n   21  	gl.Enable(gl.DEPTH_TEST)\\n   ..\\n   99  \\n  100  	gl.LoadIdentity()\\n  101: 	gl.Color4ub(255, 255, 255, 255)\\n  102  \\n  103  \\n  ...\\n  120  \\n  121  		gl.LoadIdentity()\\n  122: 		gl.Color4ub(0, 0, 0, 208)\\n  123  \\n  124  		gl.Begin(gl.QUADS)\\n\\n23 matches across 4 files\\n\\n\\nSearching 24 files for \\\"gl.Color\\\" (case sensitive)\\n\\n/home/iand/wip/amberfell/amberfell.go:\\n  122  	gl.Enable(gl.LIGHT1)\\n  123  \\n  124: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\\n  125: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\\n  126  	gl.Enable ( gl.COLOR_MATERIAL )\\n  127  \\n\\n/home/iand/wip/amberfell/fonts.go:\\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\\n   75: 		gl.Color4ub(255, 255, 255, 255)\\n   76  		gl.Begin(gl.QUADS)\\n   77  		gl.TexCoord2d(0, 0)\\n\\n/home/iand/wip/amberfell/shapes.go:\\n  175  \\n  176  		if selectedFace == EAST_FACE {\\n  177: 			gl.Color4ub(96, 208, 96, 255)\\n  178  		} else {\\n  179: 			gl.Color4ub(255, 255, 255, 255)\\n  180  		}\\n  181  \\n  ...\\n  206  	if wtexture != nil {\\n  207  		if selectedFace == WEST_FACE {\\n  208: 			gl.Color4ub(96, 208, 96, 255)\\n  209  		} else {\\n  210: 			gl.Color4ub(255, 255, 255, 255)\\n  211  		}\\n  212  \\n  ...\\n  231  	if ntexture != nil {\\n  232  		if selectedFace == NORTH_FACE {\\n  233: 			gl.Color4ub(96, 208, 96, 255)\\n  234  		} else {\\n  235: 			gl.Color4ub(255, 255, 255, 255)\\n  236  		}\\n  237  \\n  ...\\n  254  	if stexture != nil {\\n  255  		if selectedFace == SOUTH_FACE {\\n  256: 			gl.Color4ub(96, 208, 96, 255)\\n  257  		} else {\\n  258: 			gl.Color4ub(255, 255, 255, 255)\\n  259  		}\\n  260  \\n  ...\\n  279  	if utexture != nil {\\n  280  		if selectedFace == UP_FACE {\\n  281: 			gl.Color4ub(96, 208, 96, 255)\\n  282  		} else {\\n  283: 			gl.Color4ub(255, 255, 255, 255)\\n  284  		}\\n  285  \\n  ...\\n  382  	if dtexture != nil {\\n  383  		if selectedFace == DOWN_FACE {\\n  384: 			gl.Color4ub(96, 208, 96, 255)\\n  385  		} else {\\n  386: 			gl.Color4ub(255, 255, 255, 255)\\n  387  		}\\n  388  \\n  ...\\n  410  	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\\n  411  	// might need to use glPolygonOffset\\n  412: 	gl.Color4ub(255, 32, 32, 0)\\n  413  	if face == UP_FACE {\\n  414  		gl.Enable(gl.POLYGON_OFFSET_LINE)\\n  ...\\n  425  		gl.Disable(gl.POLYGON_OFFSET_LINE)\\n  426  	}\\n  427: 	gl.Color4ub(255, 128, 128, 128)\\n  428  }\\n  429  \\n\\n/home/iand/wip/amberfell/window.go:\\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\\n   18  \\n   19: 	gl.Color4ub(255, 255, 255, 255)\\n   20  	gl.Enable(gl.TEXTURE_2D)\\n   21  	gl.Enable(gl.DEPTH_TEST)\\n   ..\\n   99  \\n  100  	gl.LoadIdentity()\\n  101: 	gl.Color4ub(128, 128, 128, 255)\\n  102  \\n  103  \\n  ...\\n  120  \\n  121  		gl.LoadIdentity()\\n  122: 		gl.Color4ub(0, 0, 0, 208)\\n  123  \\n  124  		gl.Begin(gl.QUADS)\\n\\n20 matches across 4 files\\n\\n\\nSearching 24 files for \\\"gl.Color\\\" (case sensitive)\\n\\n/home/iand/wip/amberfell/amberfell.go:\\n  122  	gl.Enable(gl.LIGHT1)\\n  123  \\n  124: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.EMISSION )\\n  125: 	// gl.ColorMaterial ( gl.FRONT_AND_BACK, gl.AMBIENT_AND_DIFFUSE )\\n  126  	gl.Enable ( gl.COLOR_MATERIAL )\\n  127  \\n\\n/home/iand/wip/amberfell/fonts.go:\\n   73  		h := float32(consoleFont.height) * PIXEL_SCALE\\n   74  		w := float32(consoleFont.widths[ch]) * PIXEL_SCALE\\n   75: 		gl.Color4ub(255, 255, 255, 255)\\n   76  		gl.Begin(gl.QUADS)\\n   77  		gl.TexCoord2d(0, 0)\\n\\n/home/iand/wip/amberfell/shapes.go:\\n  175  \\n  176  		if selectedFace == EAST_FACE {\\n  177: 			gl.Color4ub(96, 208, 96, 255)\\n  178  		} else {\\n  179: 			gl.Color4ub(255, 255, 255, 255)\\n  180  		}\\n  181  \\n  ...\\n  206  	if wtexture != nil {\\n  207  		if selectedFace == WEST_FACE {\\n  208: 			gl.Color4ub(96, 208, 96, 255)\\n  209  		} else {\\n  210: 			gl.Color4ub(255, 255, 255, 255)\\n  211  		}\\n  212  \\n  ...\\n  231  	if ntexture != nil {\\n  232  		if selectedFace == NORTH_FACE {\\n  233: 			gl.Color4ub(96, 208, 96, 255)\\n  234  		} else {\\n  235: 			gl.Color4ub(255, 255, 255, 255)\\n  236  		}\\n  237  \\n  ...\\n  254  	if stexture != nil {\\n  255  		if selectedFace == SOUTH_FACE {\\n  256: 			gl.Color4ub(96, 208, 96, 255)\\n  257  		} else {\\n  258: 			gl.Color4ub(255, 255, 255, 255)\\n  259  		}\\n  260  \\n  ...\\n  279  	if utexture != nil {\\n  280  		if selectedFace == UP_FACE {\\n  281: 			gl.Color4ub(96, 208, 96, 255)\\n  282  		} else {\\n  283: 			gl.Color4ub(255, 255, 255, 255)\\n  284  		}\\n  285  \\n  ...\\n  382  	if dtexture != nil {\\n  383  		if selectedFace == DOWN_FACE {\\n  384: 			gl.Color4ub(96, 208, 96, 255)\\n  385  		} else {\\n  386: 			gl.Color4ub(255, 255, 255, 255)\\n  387  		}\\n  388  \\n  ...\\n  410  // 	w, h, d := float32(bw)/2, float32(bh)/2, float32(bd)/2\\n  411  // 	// might need to use glPolygonOffset\\n  412: // 	gl.Color4ub(255, 32, 32, 0)\\n  413  // 	if face == UP_FACE {\\n  414  // 		gl.Enable(gl.POLYGON_OFFSET_LINE)\\n  ...\\n  425  // 		gl.Disable(gl.POLYGON_OFFSET_LINE)\\n  426  // 	}\\n  427: // 	gl.Color4ub(255, 128, 128, 128)\\n  428  // }\\n  429  \\n\\n/home/iand/wip/amberfell/window.go:\\n   17  	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\\n   18  \\n   19: 	gl.Color4ub(255, 255, 255, 255)\\n   20  	gl.Enable(gl.TEXTURE_2D)\\n   21  	gl.Enable(gl.DEPTH_TEST)\\n   ..\\n   99  \\n  100  	gl.LoadIdentity()\\n  101: 	gl.Color4ub(128, 128, 128, 255)\\n  102  \\n  103  \\n  ...\\n  120  \\n  121  		gl.LoadIdentity()\\n  122: 		gl.Color4ub(0, 0, 0, 208)\\n  123  \\n  124  		gl.Begin(gl.QUADS)\\n\\n20 matches across 4 files\\n\",\n   60  			\"settings\":\n   61  			{\n\n/home/iand/wip/amberfell/window.go:\n   26  \n   27  	if timeOfDay < 5.3 || timeOfDay > 20.7 {\n   28: 		gl.Enable(gl.LIGHT1)\n   29  	} else {\n   30: 		gl.Disable(gl.LIGHT1)\n   31  	}\n   32  \n   ..\n   74  	diffuse := float32(1)\n   75  \n   76: 	gl.Lightfv(gl.LIGHT1, gl.POSITION, []float32{0, 1, 0, 1})\n   77: 	gl.Lightfv(gl.LIGHT1, gl.AMBIENT, []float32{ambient, ambient, ambient, 1})\n   78: 	gl.Lightfv(gl.LIGHT1, gl.SPECULAR, []float32{specular, specular, specular, 1})\n   79: 	gl.Lightfv(gl.LIGHT1, gl.DIFFUSE, []float32{diffuse, diffuse, diffuse, 1})\n   80: 	gl.Lightf(gl.LIGHT1, gl.CONSTANT_ATTENUATION, 1.5)\n   81: 	gl.Lightf(gl.LIGHT1, gl.LINEAR_ATTENUATION, 0.5)\n   82: 	gl.Lightf(gl.LIGHT1, gl.QUADRATIC_ATTENUATION, 0.01)\n   83: 	gl.Lightf(gl.LIGHT1, gl.SPOT_CUTOFF, 35)\n   84: 	gl.Lightf(gl.LIGHT1, gl.SPOT_EXPONENT, 2.0)\n   85: 	gl.Lightfv(gl.LIGHT1, gl.SPOT_DIRECTION, []float32{float32(math.Cos(ThePlayer.Heading() * math.Pi / 180)), float32(-0.7), -float32(math.Sin(ThePlayer.Heading() * math.Pi / 180))})\n   86  \n   87  	// CheckGLError()\n   ..\n  121  	gl.Disable(gl.LIGHTING)\n  122  	gl.Disable(gl.LIGHT0)\n  123: 	gl.Disable(gl.LIGHT1)\n  124  \n  125  	gl.Begin(gl.TRIANGLE_FAN)\n\n17 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 23006,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "amberfell.sublime-workspace",
			"settings":
			{
				"buffer_size": 34798,
				"line_ending": "Unix"
			}
		},
		{
			"file": "functions.go",
			"settings":
			{
				"buffer_size": 1758,
				"line_ending": "Unix"
			}
		},
		{
			"file": "gameloop.go",
			"settings":
			{
				"buffer_size": 4666,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/main.py",
			"settings":
			{
				"buffer_size": 3320,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/volume.py",
			"settings":
			{
				"buffer_size": 4527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/ext/ext.c",
			"settings":
			{
				"buffer_size": 14731,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/occlusion.py",
			"settings":
			{
				"buffer_size": 5231,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/util.py",
			"settings":
			{
				"buffer_size": 4299,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mob.go",
			"settings":
			{
				"buffer_size": 2823,
				"line_ending": "Unix"
			}
		},
		{
			"file": "player.go",
			"settings":
			{
				"buffer_size": 5455,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shapes.go",
			"settings":
			{
				"buffer_size": 13669,
				"line_ending": "Unix"
			}
		},
		{
			"file": "geometry.go",
			"settings":
			{
				"buffer_size": 12876,
				"line_ending": "Unix"
			}
		},
		{
			"file": "geometry_test.go",
			"settings":
			{
				"buffer_size": 6084,
				"line_ending": "Unix"
			}
		},
		{
			"file": "timer.go",
			"settings":
			{
				"buffer_size": 1191,
				"line_ending": "Unix"
			}
		},
		{
			"file": "viewport.go",
			"settings":
			{
				"buffer_size": 4916,
				"line_ending": "Unix"
			}
		},
		{
			"file": "window.go",
			"settings":
			{
				"buffer_size": 8491,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fonts.go",
			"settings":
			{
				"buffer_size": 2785,
				"line_ending": "Unix"
			}
		},
		{
			"file": "wolf.go",
			"settings":
			{
				"buffer_size": 991,
				"line_ending": "Unix"
			}
		},
		{
			"file": "world.go",
			"settings":
			{
				"buffer_size": 14923,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 297.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/iand/wip/amberfell/amberfell.sublime-workspace",
		"/home/iand/wip/amberfell/scene.go",
		"/home/iand/wip/amberfell/vector_test.go",
		"/home/iand/wip/amberfell/vector.go",
		"/home/iand/.config/sublime-text-2/Packages/GoSublime/GoSublime.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/GoSublime/Default (Linux).sublime-keymap",
		"/home/iand/wip/amberfell/globals.go",
		"/home/iand/wip/amberfell/	vector_test.go",
		"/home/iand/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/User/GoSublime.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/iand/wip/amberfell/amberfell.sublime-project",
		"/home/iand/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/iand/wip/amberfell/amberfell.go",
		"/home/iand/wip/amberfell/af/constants.go",
		"/home/iand/wip/amberfell/af/functions.go",
		"/home/iand/wip/amberfell/af/gameloop.go",
		"/home/iand/wip/amberfell/af/globals.go",
		"/home/iand/wip/amberfell/af/mob.go",
		"/home/iand/wip/amberfell/af/player.go",
		"/home/iand/wip/amberfell/af/shapes.go",
		"/home/iand/wip/amberfell/af/vector.go",
		"/home/iand/wip/amberfell/af/vector_test.go",
		"/home/iand/wip/amberfell/af/window.go",
		"/home/iand/wip/amberfell/af/wolf.go",
		"/home/iand/wip/amberfell/af/world.go",
		"/home/iand/wip/amberfell/af/timer.go",
		"/home/iand/wip/amberfell/README.md",
		"/home/iand/wip/amberfell/af/blocks.go",
		"/home/iand/.config/sublime-text-2/Packages/User/Go.sublime-settings",
		"/home/iand/Documents/minecraft-server/plugins.txt",
		"/home/iand/Dropbox/documents/minecraft-server/plugins.txt",
		"/home/iand/wip/gofirst/sdltest.go",
		"/home/iand/wip/gofirst/test.go",
		"/home/iand/wip/gofirst/gltest.go",
		"/home/iand/wip/gofirst/draw.go",
		"/home/iand/wip/gofirst/glcube.go",
		"/home/iand/gocode/src/amberfell/amberfell.go",
		"/home/iand/gocode/src/amberfell/README.md",
		"/home/iand/gocode/src/amberfell/af/mob.go",
		"/home/iand/gocode/src/amberfell/af/scene.go",
		"/home/iand/gocode/src/amberfell/af/world.go",
		"/home/iand/gocode/src/github.com/iand/amberfell/amberfell.go",
		"/home/iand/gocode/src/amberfell/af/player.go",
		"/home/iand/.cache/.fr-tMTa0R/Zen of Networked Physics/Source/Cube.h",
		"/home/iand/gocode/src/amberfell/af/vector.go",
		"/home/iand/gocode/src/amberfell/af/timer.go",
		"/home/iand/gocode/src/amberfell/af/constants.go",
		"/home/iand/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/iand/gocode/src/amberfell/world.go",
		"/home/iand/bin/go/src/pkg/code.google.com/p/graphics-go/graphics/rotate.go",
		"/home/iand/bin/go/src/pkg/code.google.com/p/graphics-go/graphics/affine.go",
		"/home/iand/wip/gofirst/graphicstest.go",
		"/home/iand/wip/gofirst/gomandel.go",
		"/home/iand/.profile",
		"/home/iand/wip/go/hello.go",
		"/home/iand/bin/minecraft/start",
		"/home/iand/fixgnome.sh",
		"/home/iand/wip/mandel/mandel.go",
		"/home/iand/wip/forms/index.php",
		"/home/iand/wip/mdjson/form.html",
		"/home/iand/wip/myron/myron",
		"/home/iand/wip/cohodo/index.html",
		"/home/iand/wip/factpump/hello.py",
		"/home/iand/wip/sparql-templates/demo.php",
		"/home/iand/wip/sameas/sameas.php",
		"/home/iand/wip/widgets/tablemaker.php",
		"/home/iand/Documents/blogging/ia-20120316.txt",
		"/home/iand/wip/playn-samples/README.md",
		"/home/iand/web/iandavis.com/wiki/htdocs/genealogy/wiki.d/Main.1876BirthOfLouisaEmmings",
		"/home/iand/web/iandavis.com/wiki/htdocs/genealogy/wiki.d/Main.RG13-1359-26-20",
		"/home/iand/bin/craftbukkit/plugins/FishPeople/config.yml",
		"/home/iand/bin/craftbukkit/plugins/WalkTheWalk/config.yml",
		"/home/iand/bin/craftbukkit/plugins/TreeAssist/config.yml",
		"/home/iand/bin/craftbukkit/plugins/CreativeGates/conf.json",
		"/home/iand/bin/craftbukkit/plugins/TempleCraft/temples.yml",
		"/home/iand/bin/craftbukkit/plugins/SmoothFlight/config.yml",
		"/home/iand/bin/craftbukkit/plugins/qQuests/quests.yml",
		"/home/iand/bin/craftbukkit/plugins/EasyRules/rules.txt",
		"/home/iand/.minecraft/config/mod_ReiMinimap.cfg",
		"/home/iand/.minecraft/mods/rei_minimap/option.txt",
		"/home/iand/bin/craftbukkit/plugins/TobiMotd/config.yml",
		"/home/iand/bin/craftbukkit/plugins/WelcomeRulezz/WelcomeMessage.yml",
		"/home/iand/bin/craftbukkit/plugins/WelcomeRulezz/Commands.yml",
		"/home/iand/bin/craftbukkit/plugins/Safe Creeper/config.yml",
		"/home/iand/bin/craftbukkit/plugins/Safe Creeper/global.yml",
		"/home/iand/bin/craftbukkit/plugins/PermissionsBukkit/config.yml",
		"/home/iand/bin/craftbukkit/plugins/DeathTpPlus/config.yml",
		"/home/iand/bin/craftbukkit/config.yml",
		"/home/iand/bin/craftbukkit/server.properties",
		"/home/iand/bin/craftbukkit/bukkit.yml",
		"/home/iand/bin/craftbukkit/ops.txt",
		"/home/iand/bin/craftbukkit-1.1/server.properties",
		"/home/iand/bin/craftbukkit/craftbukkit.sh",
		"/home/iand/bin/craftbukkit/plugins/BOSEconomy/settings.txt",
		"/home/iand/bin/craftbukkit/plugins/BOSEconomy/brackets.txt",
		"/home/iand/bin/craftbukkit/plugins/BOSEconomy/accounts.txt",
		"/home/iand/.mozilla/firefox/mwad0hks.default/itsalltext/mail.google.com.2c2f1l3d1e.txt",
		"/home/iand/bin/craftbukkit/plugins/TempleCraft/config.yml",
		"/home/iand/bin/craftbukkit/plugins/SecureChests/config.yml",
		"/home/iand/bin/craftbukkit/plugins/EpicQuest/quests.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-random_examples.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/overhaul-catballs.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/overhaul-zarius.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-undead_chaos.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-fix_undroppables.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-ore_extraction.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-goldtools-smelt.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-goldtools-basic.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/otherdrops-drops.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-dyewool.yml",
		"/home/iand/bin/craftbukkit/plugins/OtherDrops/includes/od-stop_mob_farms.yml",
		"/home/iand/bin/craftbukkit/plugins/SignShop/config.yml",
		"/home/iand/bin/craftbukkit/plugins/bPermissions/world/users.yml",
		"/home/iand/bin/craftbukkit/plugins/bPermissions/world/groups.yml",
		"/home/iand/bin/craftbukkit/plugins/bPermissions/config.yml",
		"/home/iand/bin/craftbukkit/plugins/bPermissions/users.yml",
		"/home/iand/bin/craftbukkit/plugins/bPermissions/groups.yml",
		"/home/iand/bin/craftbukkit/plugins/SignShop/sellers.yml",
		"/home/iand/bin/craftbukkit/plugins/SimpleSpawn/config.yml",
		"/home/iand/bin/craftbukkit/plugins/GriefPreventionData/config.yml",
		"/home/iand/bin/craftbukkit/plugins/MyHome/config.yml"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 88.0,
		"where_history":
		[
			"-amberfell",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"tesselate",
			"fps",
			"update",
			"gl.LIGHT1",
			"Equals",
			"Vectori",
			"TRUNK",
			"CHUNK_WIDTH",
			"TRUNK",
			"currentAction",
			"radius",
			"&textures",
			"MapTextures",
			"currentTime",
			"t",
			"gl.Color",
			"gl.Color4ub(96, 208, 96, 255)",
			"Color",
			"color",
			"self.",
			"'a'",
			"SCREEN_SCALE",
			"MapTextures",
			"]",
			"CreateRGB",
			"screen",
			"96, 208, 96, 64",
			"64, 192, 64, 255",
			"64, 192, 64, 64",
			"DebugMode",
			"64, 192, 192, 64",
			"ThePlayer",
			"w",
			"p",
			"world",
			"select",
			"transl",
			"look",
			"Vectori",
			"feedback",
			"Set(",
			"matrixmo",
			"Heading()",
			"Heading",
			"gl.Translate",
			"%4.2f",
			"0.5",
			"0000     ",
			"0000 ",
			"r",
			"c",
			"IntVector",
			"selectMode",
			"cuboi",
			"checkgl",
			"case: BLOCK_DIRT",
			"case: BLOCK_STONE",
			"Set(",
			"af.",
			"tree",
			"collap",
			"af.",
			"player",
			"af.world",
			"af.af.world",
			"world",
			"bind",
			"ind",
			"bind",
			"unbin",
			"ortho",
			"is falling",
			"Load",
			"chunks[",
			"48",
			"24",
			"Blocks",
			"face",
			"Overlaps",
			"mapTextures",
			"scale/2",
			"blockSize",
			"af.",
			"player",
			"update",
			"player",
			"p.",
			"p *Player",
			"At(",
			"Set(",
			".Set",
			"enable",
			"draw",
			"screenTo",
			"frus",
			".current",
			"rotate",
			"TODO",
			"Derivative",
			"pene",
			"integrate",
			"force",
			"recalc",
			"momentum =",
			"fmt",
			"SetVx",
			"box",
			"enable",
			".At",
			"fabs",
			"float32",
			"debugMode",
			"player",
			"world.blocks",
			"world.d",
			"world.h",
			"world.w",
			"af.GroundLevel",
			"GroundLevel",
			"groundLevel",
			"World",
			"3",
			"3.0",
			"1.5",
			"6",
			"auto",
			"orth",
			"1.5"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"LEAVES",
			"textures",
			"//gl.Color4ub(96, 208, 96, 255)",
			"",
			"ch",
			"96, 208, 96, 255",
			"96, 208, 96, 64",
			"64, 192, 64, 255",
			"64, 192, 64, 64",
			"self",
			"%18.13f",
			", ",
			"i",
			"j",
			"Vectori",
			"case BLOCK_DIRT:",
			"case BLOCK_STONE:",
			"",
			"af.ThePlayer",
			"af.World",
			"af.world",
			"MapTextures",
			"width",
			"scale",
			"",
			"w.",
			"w *Wolf",
			"",
			"math.Abs",
			"float64",
			"DebugMode",
			"mob",
			"world.Blocks",
			"world.D",
			"world.H",
			"world.W",
			"GroundLevel",
			"af.GroundLevel",
			"GroundLevel",
			"blockSize/2",
			"blockSize",
			"0.75",
			"",
			"-10",
			"  "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 12,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "amberfell.go",
					"settings":
					{
						"buffer_size": 3432,
						"regions":
						{
						},
						"selection":
						[
							[
								915,
								915
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 197.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "constants.go",
					"settings":
					{
						"buffer_size": 1545,
						"regions":
						{
						},
						"selection":
						[
							[
								1539,
								1539
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 632.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 23006,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										210,
										222
									],
									[
										318,
										330
									],
									[
										561,
										573
									],
									[
										634,
										646
									],
									[
										906,
										911
									],
									[
										1047,
										1052
									],
									[
										1134,
										1139
									],
									[
										1334,
										1339
									],
									[
										1448,
										1453
									],
									[
										1666,
										1671
									],
									[
										1729,
										1734
									],
									[
										1948,
										1953
									],
									[
										2154,
										2159
									],
									[
										2165,
										2170
									],
									[
										2362,
										2367
									],
									[
										2546,
										2551
									],
									[
										2604,
										2609
									],
									[
										2740,
										2745
									],
									[
										2798,
										2803
									],
									[
										2935,
										2940
									],
									[
										2993,
										2998
									],
									[
										3130,
										3135
									],
									[
										3188,
										3193
									],
									[
										3322,
										3327
									],
									[
										3380,
										3385
									],
									[
										3516,
										3521
									],
									[
										3574,
										3579
									],
									[
										3747,
										3752
									],
									[
										3915,
										3920
									],
									[
										4101,
										4106
									],
									[
										4247,
										4252
									],
									[
										4345,
										4350
									],
									[
										4572,
										4580
									],
									[
										4635,
										4643
									],
									[
										4907,
										4915
									],
									[
										5091,
										5099
									],
									[
										5149,
										5157
									],
									[
										5285,
										5293
									],
									[
										5343,
										5351
									],
									[
										5480,
										5488
									],
									[
										5538,
										5546
									],
									[
										5675,
										5683
									],
									[
										5733,
										5741
									],
									[
										5867,
										5875
									],
									[
										5925,
										5933
									],
									[
										6061,
										6069
									],
									[
										6119,
										6127
									],
									[
										6292,
										6300
									],
									[
										6460,
										6468
									],
									[
										6646,
										6654
									],
									[
										6792,
										6800
									],
									[
										6890,
										6898
									],
									[
										7120,
										7128
									],
									[
										7183,
										7191
									],
									[
										7455,
										7463
									],
									[
										7639,
										7647
									],
									[
										7697,
										7705
									],
									[
										7833,
										7841
									],
									[
										7891,
										7899
									],
									[
										8028,
										8036
									],
									[
										8086,
										8094
									],
									[
										8223,
										8231
									],
									[
										8281,
										8289
									],
									[
										8415,
										8423
									],
									[
										8473,
										8481
									],
									[
										8609,
										8617
									],
									[
										8667,
										8675
									],
									[
										8849,
										8857
									],
									[
										9032,
										9040
									],
									[
										9221,
										9229
									],
									[
										9367,
										9375
									],
									[
										9465,
										9473
									],
									[
										9731,
										9742
									],
									[
										9844,
										9855
									],
									[
										10052,
										10063
									],
									[
										10070,
										10081
									],
									[
										10088,
										10099
									],
									[
										10106,
										10117
									],
									[
										10124,
										10135
									],
									[
										10142,
										10153
									],
									[
										10291,
										10302
									],
									[
										10345,
										10356
									],
									[
										10751,
										10762
									],
									[
										10985,
										10996
									],
									[
										11018,
										11029
									],
									[
										11047,
										11058
									],
									[
										11076,
										11087
									],
									[
										11105,
										11116
									],
									[
										11134,
										11145
									],
									[
										11232,
										11243
									],
									[
										11264,
										11275
									],
									[
										11292,
										11303
									],
									[
										11320,
										11331
									],
									[
										11348,
										11359
									],
									[
										11376,
										11387
									],
									[
										11619,
										11628
									],
									[
										13517,
										13526
									],
									[
										16540,
										16549
									],
									[
										19190,
										19199
									],
									[
										21899,
										21908
									],
									[
										21947,
										21956
									],
									[
										22039,
										22048
									],
									[
										22105,
										22114
									],
									[
										22188,
										22197
									],
									[
										22275,
										22284
									],
									[
										22357,
										22366
									],
									[
										22416,
										22425
									],
									[
										22473,
										22482
									],
									[
										22534,
										22543
									],
									[
										22583,
										22592
									],
									[
										22636,
										22645
									],
									[
										22926,
										22935
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								22912,
								22912
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 7965.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "amberfell.sublime-workspace",
					"settings":
					{
						"buffer_size": 34798,
						"regions":
						{
						},
						"selection":
						[
							[
								22098,
								22098
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8670.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "functions.go",
					"settings":
					{
						"buffer_size": 1758,
						"regions":
						{
						},
						"selection":
						[
							[
								1736,
								1736
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 766.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "gameloop.go",
					"settings":
					{
						"buffer_size": 4666,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 3.0,
						"translation.y": 8.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/main.py",
					"settings":
					{
						"buffer_size": 3320,
						"regions":
						{
						},
						"selection":
						[
							[
								2546,
								2546
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1247.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/volume.py",
					"settings":
					{
						"buffer_size": 4527,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/ext/ext.c",
					"settings":
					{
						"buffer_size": 14731,
						"regions":
						{
						},
						"selection":
						[
							[
								6512,
								6512
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3267.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/occlusion.py",
					"settings":
					{
						"buffer_size": 5231,
						"regions":
						{
						},
						"selection":
						[
							[
								2411,
								2411
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1262.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/iand/wip/mc-ogl-shaders/render_experiments/util.py",
					"settings":
					{
						"buffer_size": 4299,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "mob.go",
					"settings":
					{
						"buffer_size": 2823,
						"regions":
						{
						},
						"selection":
						[
							[
								1611,
								2243
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1005.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "player.go",
					"settings":
					{
						"buffer_size": 5455,
						"regions":
						{
						},
						"selection":
						[
							[
								1657,
								1796
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 813.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "shapes.go",
					"settings":
					{
						"buffer_size": 13669,
						"regions":
						{
						},
						"selection":
						[
							[
								2691,
								2691
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 955.0,
						"translation.y": 1263.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "geometry.go",
					"settings":
					{
						"buffer_size": 12876,
						"regions":
						{
						},
						"selection":
						[
							[
								3843,
								3849
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2026.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "geometry_test.go",
					"settings":
					{
						"buffer_size": 6084,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "timer.go",
					"settings":
					{
						"buffer_size": 1191,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "viewport.go",
					"settings":
					{
						"buffer_size": 4916,
						"regions":
						{
						},
						"selection":
						[
							[
								2579,
								2532
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1471.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "window.go",
					"settings":
					{
						"buffer_size": 8491,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "fonts.go",
					"settings":
					{
						"buffer_size": 2785,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "wolf.go",
					"settings":
					{
						"buffer_size": 991,
						"regions":
						{
						},
						"selection":
						[
							[
								954,
								954
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 150.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "world.go",
					"settings":
					{
						"buffer_size": 14923,
						"regions":
						{
						},
						"selection":
						[
							[
								555,
								555
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 227.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/iand/wip/iandavis.com/iandavis.com.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 203.0,
	"status_bar_visible": true
}
